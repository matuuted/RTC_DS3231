
RTC_DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d5c  08003d5c  00004d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d74  08003d74  00004d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d7c  08003d7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d80  08003d80  00004d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003d90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003d90  000050c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba20  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2c  00000000  00000000  00010a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00012988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084f  00000000  00000000  00013440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212fa  00000000  00000000  00013c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f312  00000000  00000000  00034f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7998  00000000  00000000  0004429b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bc33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  0010bc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0010e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d44 	.word	0x08003d44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003d44 	.word	0x08003d44

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a2c      	ldr	r2, [pc, #176]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a25      	ldr	r2, [pc, #148]	@ (8000600 <MX_GPIO_Init+0xd0>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <MX_GPIO_Init+0xd0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_GPIO_Init+0xd0>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_GPIO_Init+0xd0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2120      	movs	r1, #32
 80005ba:	4812      	ldr	r0, [pc, #72]	@ (8000604 <MX_GPIO_Init+0xd4>)
 80005bc:	f001 f982 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	480c      	ldr	r0, [pc, #48]	@ (8000608 <MX_GPIO_Init+0xd8>)
 80005d8:	f000 ffe0 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005dc:	2320      	movs	r3, #32
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_GPIO_Init+0xd4>)
 80005f4:	f000 ffd2 	bl	800159c <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000
 8000608:	40020800 	.word	0x40020800

0800060c <DS3231_Test>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DS3231_Test(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
    DS3231_Status st;

    // Verifico que el DS3231 este conectado en el Bus.
    st = DS3231_Init();
 8000612:	f000 fa9b 	bl	8000b4c <DS3231_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
    if (st != DS3231_OK) {
 800061a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <DS3231_Test+0x1a>
        Error_Handler();
 8000622:	f000 f8d7 	bl	80007d4 <Error_Handler>
    }

    // Configuro la fecha y hora inicial -> 2025-09-25 (jueves=4) 16:05:30
    st = DS3231_SetTime(25, 9, 25, 4, 16, 5, 30);
 8000626:	231e      	movs	r3, #30
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	2305      	movs	r3, #5
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2310      	movs	r3, #16
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2304      	movs	r3, #4
 8000634:	2219      	movs	r2, #25
 8000636:	2109      	movs	r1, #9
 8000638:	2019      	movs	r0, #25
 800063a:	f000 fb41 	bl	8000cc0 <DS3231_SetTime>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]

    // Apago y enciendo la salida de 32Khz
    st = DS3231_Enable32KHz(false);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fc15 	bl	8000e72 <DS3231_Enable32KHz>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]

    st = DS3231_Enable32KHz(true);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fc10 	bl	8000e72 <DS3231_Enable32KHz>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]

    // Configurar SQW en 1 Hz 
    st = DS3231_SetSQWFreq(DS3231_SQW_1HZ);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fc6d 	bl	8000f36 <DS3231_SetSQWFreq>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]

    // Reconfiguro SQW en 4KHz
    st = DS3231_SetSQWFreq(DS3231_SQW_4096HZ);
 8000660:	2010      	movs	r0, #16
 8000662:	f000 fc68 	bl	8000f36 <DS3231_SetSQWFreq>
 8000666:	4603      	mov	r3, r0
 8000668:	73fb      	strb	r3, [r7, #15]


    // Test de lectura del aging.
    st = DS3231_SetAging(0);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fcaa 	bl	8000fc4 <DS3231_SetAging>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
	  int8_t aging = 0x7F;
 8000674:	237f      	movs	r3, #127	@ 0x7f
 8000676:	73bb      	strb	r3, [r7, #14]
	  st = DS3231_GetAging(&aging);
 8000678:	f107 030e 	add.w	r3, r7, #14
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fcba 	bl	8000ff6 <DS3231_GetAging>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]

    // Lectura del registro de status y control
    uint8_t status_reg = 0, control_reg = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	737b      	strb	r3, [r7, #13]
 800068a:	2300      	movs	r3, #0
 800068c:	733b      	strb	r3, [r7, #12]
    DS3231_GetStatus(&status_reg);
 800068e:	f107 030d 	add.w	r3, r7, #13
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fbb3 	bl	8000dfe <DS3231_GetStatus>
    DS3231_GetControl(&control_reg);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fbcb 	bl	8000e38 <DS3231_GetControl>

    // Leer hora y temperatura cada 1 s
    while (1)
    {
        DS3231_Time now;
        float temp_c = 0.0f;
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]

        st = DS3231_ReadTime(&now);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa59 	bl	8000b62 <DS3231_ReadTime>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]

        st = DS3231_GetTemperature(&temp_c);
 80006b4:	463b      	mov	r3, r7
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fb6b 	bl	8000d92 <DS3231_GetTemperature>
 80006bc:	4603      	mov	r3, r0
 80006be:	73fb      	strb	r3, [r7, #15]

        HAL_Delay(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c4:	f000 fe60 	bl	8001388 <HAL_Delay>
    {
 80006c8:	bf00      	nop
 80006ca:	e7ea      	b.n	80006a2 <DS3231_Test+0x96>

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 fde8 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f810 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d8:	f7ff ff2a 	bl	8000530 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006dc:	f000 f932 	bl	8000944 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Inicialización del I2C master.
	if (I2CM_I2C1_Init() != HAL_OK) { Error_Handler(); }
 80006e0:	f000 fd18 	bl	8001114 <I2CM_I2C1_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <main+0x22>
 80006ea:	f000 f873 	bl	80007d4 <Error_Handler>
	
  DS3231_Test();  
 80006ee:	f7ff ff8d 	bl	800060c <DS3231_Test>

	while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0x26>
	...

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	@ 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 faf0 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	4a29      	ldr	r2, [pc, #164]	@ (80007cc <SystemClock_Config+0xd4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	@ 0x40
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000744:	4a22      	ldr	r2, [pc, #136]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800076c:	2310      	movs	r3, #16
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000770:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000774:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000776:	2304      	movs	r3, #4
 8000778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fd4e 	bl	8003228 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 f81f 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f9ee 	bl	8002b94 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007be:	f000 f809 	bl	80007d4 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <HAL_MspInit+0x4c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800081e:	2007      	movs	r0, #7
 8000820:	f000 fe88 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_I2C_MspInit>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <HAL_I2C_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12b      	bne.n	80008aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <HAL_I2C_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800086e:	23c0      	movs	r3, #192	@ 0xc0
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	2312      	movs	r3, #18
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087e:	2304      	movs	r3, #4
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <HAL_I2C_MspInit+0x8c>)
 800088a:	f000 fe87 	bl	800159c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_I2C_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_I2C_MspInit+0x88>)
 8000898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_I2C_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 fd17 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <MX_USART2_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800097c:	f002 fef2 	bl	8003764 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f7ff ff25 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000028 	.word	0x20000028
 8000994:	40004400 	.word	0x40004400

08000998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <HAL_UART_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f2:	230c      	movs	r3, #12
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_UART_MspInit+0x8c>)
 8000a0e:	f000 fdc5 	bl	800159c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	@ 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a2c:	f7ff ff78 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f003 f951 	bl	8003cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fe37 	bl	80006cc <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	08003d84 	.word	0x08003d84
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	200000c8 	.word	0x200000c8

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <dec2bcd>:
 * 
 * bcd2dec:
 * - Convierte de BCD (0x45) a decimal (45).
 *  Toma el nibble alto, lo multiplica por 10 y le suma el nibble bajo.
 */
static inline uint8_t dec2bcd(uint8_t value) { 
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(((value/10) << 4) | (value % 10)); 
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <dec2bcd+0x48>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b258      	sxtb	r0, r3
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <dec2bcd+0x48>)
 8000a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa0:	08d9      	lsrs	r1, r3, #3
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4303      	orrs	r3, r0
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	cccccccd 	.word	0xcccccccd

08000ac8 <bcd2dec>:
static inline uint8_t bcd2dec(uint8_t value) { 
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(((value >> 4) * 10) + (value & 0x0F)); 
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	091b      	lsrs	r3, r3, #4
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <DS3231_parse_hal_status>:
/* -------------------------------------------------------------------------- */
/*  API pública                                                               */
/* -------------------------------------------------------------------------- */

static DS3231_Status DS3231_parse_hal_status(HAL_StatusTypeDef hal_status)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
    switch (hal_status)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d816      	bhi.n	8000b3a <DS3231_parse_hal_status+0x3e>
 8000b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <DS3231_parse_hal_status+0x18>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b2f 	.word	0x08000b2f
 8000b1c:	08000b35 	.word	0x08000b35
 8000b20:	08000b29 	.word	0x08000b29
    {
        case HAL_OK:      return DS3231_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e00a      	b.n	8000b3e <DS3231_parse_hal_status+0x42>
        case HAL_TIMEOUT: return DS3231_TIMEOUT;
 8000b28:	f06f 0301 	mvn.w	r3, #1
 8000b2c:	e007      	b.n	8000b3e <DS3231_parse_hal_status+0x42>
        case HAL_ERROR:   return DS3231_ERROR;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e004      	b.n	8000b3e <DS3231_parse_hal_status+0x42>
        case HAL_BUSY:    return DS3231_BUSY;
 8000b34:	f06f 0304 	mvn.w	r3, #4
 8000b38:	e001      	b.n	8000b3e <DS3231_parse_hal_status+0x42>
        default:          return DS3231_ERROR;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <DS3231_Init>:
/** -------------------------------------------------------------------------- 
* Funciones de inicializacion, solo verifica la presencia del device en el Bus de I²C.                                  
* ---------------------------------------------------------------------------- 
*/
DS3231_Status DS3231_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    return DS3231_parse_hal_status(DS3231_is_ready());
 8000b50:	f000 fa74 	bl	800103c <DS3231_is_ready>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffd0 	bl	8000afc <DS3231_parse_hal_status>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <DS3231_ReadTime>:
/** -------------------------------------------------------------------------- 
* Funciones de lectura y escritura de tiempo                                        
* ---------------------------------------------------------------------------- 
*/
DS3231_Status DS3231_ReadTime(DS3231_Time *time)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b084      	sub	sp, #16
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    if (!time) return DS3231_INVALID_PARAM;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <DS3231_ReadTime+0x14>
 8000b70:	f06f 0303 	mvn.w	r3, #3
 8000b74:	e05c      	b.n	8000c30 <DS3231_ReadTime+0xce>

    DS3231_Status status = DS3231_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
    uint8_t buf[DS3231_MAX_BLOCK_READ];

    status = DS3231_parse_hal_status(DS3231_register_block_read(DS3231_REG_SECONDS, buf,  sizeof(buf)));
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2207      	movs	r2, #7
 8000b80:	4619      	mov	r1, r3
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 faaa 	bl	80010dc <DS3231_register_block_read>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffb6 	bl	8000afc <DS3231_parse_hal_status>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73fb      	strb	r3, [r7, #15]
    if (status != DS3231_OK) return status;
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <DS3231_ReadTime+0x40>
 8000b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba0:	e046      	b.n	8000c30 <DS3231_ReadTime+0xce>

    time->seconds = (uint8_t)bcd2dec(buf[0] & 0x7F);
 8000ba2:	7a3b      	ldrb	r3, [r7, #8]
 8000ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff8c 	bl	8000ac8 <bcd2dec>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	701a      	strb	r2, [r3, #0]
    time->minutes = (uint8_t)bcd2dec(buf[1] & 0x7F);
 8000bb8:	7a7b      	ldrb	r3, [r7, #9]
 8000bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff81 	bl	8000ac8 <bcd2dec>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	705a      	strb	r2, [r3, #1]
    time->hours   = (uint8_t)bcd2dec(buf[2] & 0x3F);
 8000bce:	7abb      	ldrb	r3, [r7, #10]
 8000bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff76 	bl	8000ac8 <bcd2dec>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	709a      	strb	r2, [r3, #2]
    time->day     = (uint8_t)(buf[3] & 0x07); // El dia no hace falta convertirlo, porque es el dia semanal (1...7)
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	70da      	strb	r2, [r3, #3]
    time->date    = (uint8_t)bcd2dec(buf[4] & 0x3F);
 8000bf0:	7b3b      	ldrb	r3, [r7, #12]
 8000bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff65 	bl	8000ac8 <bcd2dec>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	711a      	strb	r2, [r3, #4]
    time->month   = bcd2dec(buf[5] & 0x1F); // Enmascaro ya qque el bit7 es el centenario.
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	f003 031f 	and.w	r3, r3, #31
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff5a 	bl	8000ac8 <bcd2dec>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	715a      	strb	r2, [r3, #5]
    time->year    = bcd2dec(buf[6]);
 8000c1c:	7bbb      	ldrb	r3, [r7, #14]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff52 	bl	8000ac8 <bcd2dec>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	719a      	strb	r2, [r3, #6]

    return status;
 8000c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <DS3231_SetTimeBCD>:

static DS3231_Status DS3231_SetTimeBCD(const DS3231_Time *time)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    if (!time) return DS3231_INVALID_PARAM;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <DS3231_SetTimeBCD+0x14>
 8000c46:	f06f 0303 	mvn.w	r3, #3
 8000c4a:	e035      	b.n	8000cb8 <DS3231_SetTimeBCD+0x80>

    DS3231_Status status = DS3231_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	75fb      	strb	r3, [r7, #23]
    uint8_t buf[DS3231_MAX_BLOCK_WRITE];

    buf[0] = DS3231_REG_SECONDS;
 8000c50:	2300      	movs	r3, #0
 8000c52:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(time->seconds & 0x7F);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(time->minutes & 0x7F);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t)(time->hours   & 0x3F);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	789b      	ldrb	r3, [r3, #2]
 8000c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	73fb      	strb	r3, [r7, #15]
    buf[4] = (uint8_t)(time->day     & 0x07);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	743b      	strb	r3, [r7, #16]
    buf[5] = (uint8_t)(time->date    & 0x3F);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	747b      	strb	r3, [r7, #17]
    buf[6] = time->month;                     
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	74bb      	strb	r3, [r7, #18]
    buf[7] = time->year;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	74fb      	strb	r3, [r7, #19]

    status = DS3231_parse_hal_status(DS3231_register_block_write(buf,  sizeof(buf)));
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f9eb 	bl	800107e <DS3231_register_block_write>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff26 	bl	8000afc <DS3231_parse_hal_status>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	75fb      	strb	r3, [r7, #23]
    return status;
 8000cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <DS3231_SetTime>:

DS3231_Status DS3231_SetTime(uint8_t year, uint8_t month, uint8_t date,
                                    uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4623      	mov	r3, r4
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71bb      	strb	r3, [r7, #6]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	717b      	strb	r3, [r7, #5]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	713b      	strb	r3, [r7, #4]
    if ((sec > 59 || min > 59 || hour > 23) || 
 8000cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ce2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ce4:	d81c      	bhi.n	8000d20 <DS3231_SetTime+0x60>
 8000ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cea:	2b3b      	cmp	r3, #59	@ 0x3b
 8000cec:	d818      	bhi.n	8000d20 <DS3231_SetTime+0x60>
 8000cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cf2:	2b17      	cmp	r3, #23
 8000cf4:	d814      	bhi.n	8000d20 <DS3231_SetTime+0x60>
 8000cf6:	793b      	ldrb	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d011      	beq.n	8000d20 <DS3231_SetTime+0x60>
        (day < 1  || day > 7) ||
 8000cfc:	793b      	ldrb	r3, [r7, #4]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d80e      	bhi.n	8000d20 <DS3231_SetTime+0x60>
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <DS3231_SetTime+0x60>
        (date < 1 || date > 31) || 
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	2b1f      	cmp	r3, #31
 8000d0c:	d808      	bhi.n	8000d20 <DS3231_SetTime+0x60>
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <DS3231_SetTime+0x60>
        (month < 1 || month > 12) || 
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	2b0c      	cmp	r3, #12
 8000d18:	d802      	bhi.n	8000d20 <DS3231_SetTime+0x60>
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b63      	cmp	r3, #99	@ 0x63
 8000d1e:	d902      	bls.n	8000d26 <DS3231_SetTime+0x66>
        year > 99)
    {
        return DS3231_INVALID_PARAM;
 8000d20:	f06f 0303 	mvn.w	r3, #3
 8000d24:	e031      	b.n	8000d8a <DS3231_SetTime+0xca>
    }

    DS3231_Time time;
    time.seconds = dec2bcd(sec);
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fea6 	bl	8000a7c <dec2bcd>
 8000d30:	4603      	mov	r3, r0
 8000d32:	723b      	strb	r3, [r7, #8]
    time.minutes = dec2bcd(min);
 8000d34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe9f 	bl	8000a7c <dec2bcd>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	727b      	strb	r3, [r7, #9]
    time.hours   = dec2bcd(hour);
 8000d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fe98 	bl	8000a7c <dec2bcd>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	72bb      	strb	r3, [r7, #10]
    time.day     = (uint8_t)(day & 0x07);
 8000d50:	793b      	ldrb	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	72fb      	strb	r3, [r7, #11]
    time.date    = dec2bcd(date);
 8000d5a:	797b      	ldrb	r3, [r7, #5]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe8d 	bl	8000a7c <dec2bcd>
 8000d62:	4603      	mov	r3, r0
 8000d64:	733b      	strb	r3, [r7, #12]
    time.month   = dec2bcd(month);
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe87 	bl	8000a7c <dec2bcd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	737b      	strb	r3, [r7, #13]
    time.year    = dec2bcd(year);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe81 	bl	8000a7c <dec2bcd>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73bb      	strb	r3, [r7, #14]

    return DS3231_SetTimeBCD(&time);
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff58 	bl	8000c38 <DS3231_SetTimeBCD>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}

08000d92 <DS3231_GetTemperature>:
/** -------------------------------------------------------------------------- 
* Funcion de lectura de la temperatura                                       
* ---------------------------------------------------------------------------- 
*/
DS3231_Status DS3231_GetTemperature(float *temp)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
    if (!temp)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <DS3231_GetTemperature+0x14>
        return DS3231_INVALID_PARAM;
 8000da0:	f06f 0303 	mvn.w	r3, #3
 8000da4:	e027      	b.n	8000df6 <DS3231_GetTemperature+0x64>

    uint8_t buf[DS3231_TEMP_BUF_SIZE];

    if (DS3231_parse_hal_status(DS3231_register_block_read(DS3231_REG_TEMP_MSB, buf, sizeof(buf))) != DS3231_OK)
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2202      	movs	r2, #2
 8000dac:	4619      	mov	r1, r3
 8000dae:	2011      	movs	r0, #17
 8000db0:	f000 f994 	bl	80010dc <DS3231_register_block_read>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fea0 	bl	8000afc <DS3231_parse_hal_status>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <DS3231_GetTemperature+0x36>
        return DS3231_ERROR;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e016      	b.n	8000df6 <DS3231_GetTemperature+0x64>

    /** - Conversion de valores a grados celsius.
    *   El MSB contiene la parte entera con signo.
    *   Los 2 bits altos del LSB contienen la fracción en pasos de 0.25°C.
    */
    *temp = (int8_t)buf[0] + ((buf[1] >> 6) * 0.25f);
 8000dc8:	7b3b      	ldrb	r3, [r7, #12]
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd4:	7b7b      	ldrb	r3, [r7, #13]
 8000dd6:	099b      	lsrs	r3, r3, #6
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de2:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8000de6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	edc3 7a00 	vstr	s15, [r3]

    return DS3231_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <DS3231_GetStatus>:
/* Funciones de lectura y control de Estado                                   */
/* -------------------------------------------------------------------------- */


DS3231_Status DS3231_GetStatus(uint8_t *status)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
    if (!status) return DS3231_INVALID_PARAM;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <DS3231_GetStatus+0x14>
 8000e0c:	f06f 0303 	mvn.w	r3, #3
 8000e10:	e00e      	b.n	8000e30 <DS3231_GetStatus+0x32>
    if (DS3231_parse_hal_status(DS3231_register_read(DS3231_REG_STATUS, status)) != DS3231_OK)
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	200f      	movs	r0, #15
 8000e16:	f000 f94b 	bl	80010b0 <DS3231_register_read>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe6d 	bl	8000afc <DS3231_parse_hal_status>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <DS3231_GetStatus+0x30>
        return DS3231_ERROR;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	e000      	b.n	8000e30 <DS3231_GetStatus+0x32>
    return DS3231_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <DS3231_GetControl>:

/**
 * @brief Lee el registro de Control (0x0E).
 */
DS3231_Status DS3231_GetControl(uint8_t *control)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    if (!control) return DS3231_INVALID_PARAM;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <DS3231_GetControl+0x14>
 8000e46:	f06f 0303 	mvn.w	r3, #3
 8000e4a:	e00e      	b.n	8000e6a <DS3231_GetControl+0x32>

    if (DS3231_parse_hal_status(DS3231_register_read(DS3231_REG_CONTROL, control)) != DS3231_OK)
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	200e      	movs	r0, #14
 8000e50:	f000 f92e 	bl	80010b0 <DS3231_register_read>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe50 	bl	8000afc <DS3231_parse_hal_status>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <DS3231_GetControl+0x30>
        return DS3231_ERROR;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e000      	b.n	8000e6a <DS3231_GetControl+0x32>

    return DS3231_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <DS3231_Enable32KHz>:
/* -------------------------------------------------------------------------- */
/* Habilita la salida de salida de 32 KHz                                     */
/* -------------------------------------------------------------------------- */

DS3231_Status DS3231_Enable32KHz(bool enable)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
    uint8_t status, control;

    if (enable) {
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d027      	beq.n	8000ed2 <DS3231_Enable32KHz+0x60>
        // Leo el registro de control, para verificar que el oscilador esté encendido (EOSC = 0), en caso de que no lo esté lo enciendo.
        if (DS3231_parse_hal_status(DS3231_register_read(DS3231_REG_CONTROL, &control)) != DS3231_OK) return DS3231_ERROR;
 8000e82:	f107 030e 	add.w	r3, r7, #14
 8000e86:	4619      	mov	r1, r3
 8000e88:	200e      	movs	r0, #14
 8000e8a:	f000 f911 	bl	80010b0 <DS3231_register_read>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe33 	bl	8000afc <DS3231_parse_hal_status>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <DS3231_Enable32KHz+0x30>
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	e045      	b.n	8000f2e <DS3231_Enable32KHz+0xbc>

        if (control & DS3231_CTRL_EOSC) {
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	da13      	bge.n	8000ed2 <DS3231_Enable32KHz+0x60>
            // Si el bit de EOSC esta en 1, lo limpio y escribo nuevamente el registro de control.
            control &= ~DS3231_CTRL_EOSC;
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	73bb      	strb	r3, [r7, #14]
            if (DS3231_parse_hal_status(DS3231_register_write(DS3231_REG_CONTROL, control)) != DS3231_OK)
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	200e      	movs	r0, #14
 8000eba:	f000 f8c8 	bl	800104e <DS3231_register_write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe1b 	bl	8000afc <DS3231_parse_hal_status>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <DS3231_Enable32KHz+0x60>
                return DS3231_ERROR;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	e02d      	b.n	8000f2e <DS3231_Enable32KHz+0xbc>
        }
    }

    // Leo el estado del registro de estado.
    if (DS3231_parse_hal_status(DS3231_register_read(DS3231_REG_STATUS, &status)) != DS3231_OK) 
 8000ed2:	f107 030f 	add.w	r3, r7, #15
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	200f      	movs	r0, #15
 8000eda:	f000 f8e9 	bl	80010b0 <DS3231_register_read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fe0b 	bl	8000afc <DS3231_parse_hal_status>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <DS3231_Enable32KHz+0x80>
        return DS3231_ERROR;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	e01d      	b.n	8000f2e <DS3231_Enable32KHz+0xbc>

    if (enable) 
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <DS3231_Enable32KHz+0x92>
        status |=  DS3231_STATUS_EN32KHZ;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e004      	b.n	8000f0e <DS3231_Enable32KHz+0x9c>
    else        
        status &= ~DS3231_STATUS_EN32KHZ;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f023 0308 	bic.w	r3, r3, #8
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73fb      	strb	r3, [r7, #15]

    if (DS3231_parse_hal_status(DS3231_register_write(DS3231_REG_STATUS, status)) != DS3231_OK) 
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	4619      	mov	r1, r3
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f89b 	bl	800104e <DS3231_register_write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fdee 	bl	8000afc <DS3231_parse_hal_status>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <DS3231_Enable32KHz+0xba>
        return DS3231_ERROR;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e000      	b.n	8000f2e <DS3231_Enable32KHz+0xbc>

    return DS3231_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <DS3231_SetSQWFreq>:
/* -------------------------------------------------------------------------- */
/* Configura la frecuencia de la onda cuadrada                                */
/* -------------------------------------------------------------------------- */

DS3231_Status DS3231_SetSQWFreq(uint8_t rs_bits)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl;

    if (DS3231_parse_hal_status(DS3231_register_read(DS3231_REG_CONTROL, &ctrl)) != DS3231_OK)
 8000f40:	f107 030f 	add.w	r3, r7, #15
 8000f44:	4619      	mov	r1, r3
 8000f46:	200e      	movs	r0, #14
 8000f48:	f000 f8b2 	bl	80010b0 <DS3231_register_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fdd4 	bl	8000afc <DS3231_parse_hal_status>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <DS3231_SetSQWFreq+0x2a>
        return DS3231_ERROR;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e02d      	b.n	8000fbc <DS3231_SetSQWFreq+0x86>

    // Verifico que el oscilador esté encendido (EOSC = 0), en caso de que no lo esté lo enciendo.
    if (ctrl & DS3231_CTRL_EOSC)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da04      	bge.n	8000f72 <DS3231_SetSQWFreq+0x3c>
        ctrl &= ~DS3231_CTRL_EOSC;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	73fb      	strb	r3, [r7, #15]

    // Limpio el bit INTCN, para asegurarme que el modo sea SQW y no INT.
    ctrl &= ~ DS3231_CTRL_INTCN;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	f023 0304 	bic.w	r3, r3, #4
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	73fb      	strb	r3, [r7, #15]

    // Limpio bits RS1 y RS2
    ctrl &= (uint8_t)~(DS3231_CTRL_RS1 | DS3231_CTRL_RS2);
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f023 0318 	bic.w	r3, r3, #24
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	73fb      	strb	r3, [r7, #15]

    // Configuro la nueva nueva frecuencia
    ctrl |= (rs_bits & (DS3231_CTRL_RS1 | DS3231_CTRL_RS2));
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	f003 0318 	and.w	r3, r3, #24
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]

    if (DS3231_parse_hal_status(DS3231_register_write(DS3231_REG_CONTROL, ctrl)) != DS3231_OK)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	200e      	movs	r0, #14
 8000fa2:	f000 f854 	bl	800104e <DS3231_register_write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fda7 	bl	8000afc <DS3231_parse_hal_status>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <DS3231_SetSQWFreq+0x84>
        return DS3231_ERROR;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	e000      	b.n	8000fbc <DS3231_SetSQWFreq+0x86>

    return DS3231_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <DS3231_SetAging>:
/* -------------------------------------------------------------------------- */
/* Funciones de lectura y configuracion del envejicimiento                    */
/* -------------------------------------------------------------------------- */

DS3231_Status DS3231_SetAging(int8_t offset)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    return (DS3231_parse_hal_status(DS3231_register_write(DS3231_REG_AGING, offset)) == DS3231_OK) ? DS3231_OK : DS3231_ERROR;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f000 f83b 	bl	800104e <DS3231_register_write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fd8e 	bl	8000afc <DS3231_parse_hal_status>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <DS3231_SetAging+0x26>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e001      	b.n	8000fee <DS3231_SetAging+0x2a>
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <DS3231_GetAging>:

DS3231_Status DS3231_GetAging(int8_t *offset)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    if (!offset) 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <DS3231_GetAging+0x14>
        return DS3231_INVALID_PARAM;
 8001004:	f06f 0303 	mvn.w	r3, #3
 8001008:	e014      	b.n	8001034 <DS3231_GetAging+0x3e>

    uint8_t value;

    if (DS3231_parse_hal_status(DS3231_register_read(DS3231_REG_AGING, &value)) != DS3231_OK)
 800100a:	f107 030f 	add.w	r3, r7, #15
 800100e:	4619      	mov	r1, r3
 8001010:	2010      	movs	r0, #16
 8001012:	f000 f84d 	bl	80010b0 <DS3231_register_read>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd6f 	bl	8000afc <DS3231_parse_hal_status>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <DS3231_GetAging+0x34>
        return DS3231_ERROR;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	e004      	b.n	8001034 <DS3231_GetAging+0x3e>

    *offset = (int8_t)value;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	b25a      	sxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	701a      	strb	r2, [r3, #0]
    return DS3231_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <DS3231_is_ready>:
/* -------------------------------------------------------------------------- */
/*  API pública                                                               */
/* -------------------------------------------------------------------------- */

HAL_StatusTypeDef DS3231_is_ready(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    return I2CM_IsDeviceReady(DS3231_ADDRESS, DS3231_RETRY_COUNT);
 8001040:	2103      	movs	r1, #3
 8001042:	2068      	movs	r0, #104	@ 0x68
 8001044:	f000 f900 	bl	8001248 <I2CM_IsDeviceReady>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}

0800104e <DS3231_register_write>:

HAL_StatusTypeDef DS3231_register_write(uint8_t reg, uint8_t data)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
    //Genero el buffer con la direccion del registro y el byte de data.
    uint8_t buf[2] = { reg, data };
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	733b      	strb	r3, [r7, #12]
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	737b      	strb	r3, [r7, #13]
    return I2CM_Write(DS3231_ADDRESS, buf, 2);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2202      	movs	r2, #2
 800106c:	4619      	mov	r1, r3
 800106e:	2068      	movs	r0, #104	@ 0x68
 8001070:	f000 f880 	bl	8001174 <I2CM_Write>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <DS3231_register_block_write>:

HAL_StatusTypeDef DS3231_register_block_write(uint8_t *data, uint16_t len)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]
    if (!data || len == 0) return HAL_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <DS3231_register_block_write+0x18>
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <DS3231_register_block_write+0x1c>
 8001096:	2301      	movs	r3, #1
 8001098:	e006      	b.n	80010a8 <DS3231_register_block_write+0x2a>

    return I2CM_Write(DS3231_ADDRESS, data, len);
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	461a      	mov	r2, r3
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	2068      	movs	r0, #104	@ 0x68
 80010a2:	f000 f867 	bl	8001174 <I2CM_Write>
 80010a6:	4603      	mov	r3, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <DS3231_register_read>:

HAL_StatusTypeDef DS3231_register_read(uint8_t reg, uint8_t *data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
    if (!data) return HAL_ERROR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <DS3231_register_read+0x16>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e006      	b.n	80010d4 <DS3231_register_read+0x24>
    return I2CM_Read_Sr(DS3231_ADDRESS, reg, data, 1);
 80010c6:	79f9      	ldrb	r1, [r7, #7]
 80010c8:	2301      	movs	r3, #1
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	2068      	movs	r0, #104	@ 0x68
 80010ce:	f000 f881 	bl	80011d4 <I2CM_Read_Sr>
 80010d2:	4603      	mov	r3, r0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <DS3231_register_block_read>:

HAL_StatusTypeDef DS3231_register_block_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80bb      	strh	r3, [r7, #4]
    if (!data || len == 0) return HAL_ERROR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <DS3231_register_block_read+0x1c>
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <DS3231_register_block_read+0x20>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e006      	b.n	800110a <DS3231_register_block_read+0x2e>
    return I2CM_Read_Sr(DS3231_ADDRESS, reg, data, len);
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	79f9      	ldrb	r1, [r7, #7]
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	2068      	movs	r0, #104	@ 0x68
 8001104:	f000 f866 	bl	80011d4 <I2CM_Read_Sr>
 8001108:	4603      	mov	r3, r0
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <I2CM_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
HAL_StatusTypeDef I2CM_I2C1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 800111a:	4a14      	ldr	r2, [pc, #80]	@ (800116c <I2CM_I2C1_Init+0x58>)
 800111c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 8001120:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <I2CM_I2C1_Init+0x5c>)
 8001122:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001130:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 8001132:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001136:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <I2CM_I2C1_Init+0x54>)
 8001152:	f000 fbd1 	bl	80018f8 <HAL_I2C_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <I2CM_I2C1_Init+0x4c>
	{
		return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <I2CM_I2C1_Init+0x4e>
	}
 	 return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000070 	.word	0x20000070
 800116c:	40005400 	.word	0x40005400
 8001170:	00061a80 	.word	0x00061a80

08001174 <I2CM_Write>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef I2CM_Write(uint8_t address, uint8_t *data, uint16_t size)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *i2c_handler;

	if (address == DS3231_ADDRESS) {
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b68      	cmp	r3, #104	@ 0x68
 800118c:	d111      	bne.n	80011b2 <I2CM_Write+0x3e>
		i2c_handler = &hi2c1;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <I2CM_Write+0x5c>)
 8001190:	60bb      	str	r3, [r7, #8]
	} else {
		return HAL_ERROR; // Invalid I2C address
	}
	if (HAL_I2C_Master_Transmit(i2c_handler, (address << 1), data, size, I2C_TIMEOUT) != HAL_OK) {
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	b29b      	uxth	r3, r3
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	b299      	uxth	r1, r3
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a0:	9200      	str	r2, [sp, #0]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f000 fceb 	bl	8001b80 <HAL_I2C_Master_Transmit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <I2CM_Write+0x52>
 80011b0:	e001      	b.n	80011b6 <I2CM_Write+0x42>
		return HAL_ERROR; // Invalid I2C address
 80011b2:	2301      	movs	r3, #1
 80011b4:	e008      	b.n	80011c8 <I2CM_Write+0x54>
		if (HAL_I2C_GetError(i2c_handler) != HAL_I2C_ERROR_AF) {
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f001 f940 	bl	800243c <HAL_I2C_GetError>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d001      	beq.n	80011c6 <I2CM_Write+0x52>
			return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <I2CM_Write+0x54>
		}
	}
	return ret; 
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000070 	.word	0x20000070

080011d4 <I2CM_Read_Sr>:
	}
	return ret; 
}

HAL_StatusTypeDef I2CM_Read_Sr(uint8_t address, uint8_t reg, uint8_t *data, uint16_t size)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af04      	add	r7, sp, #16
 80011da:	603a      	str	r2, [r7, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	460b      	mov	r3, r1
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *i2c_handler;

	if (address == DS3231_ADDRESS) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b68      	cmp	r3, #104	@ 0x68
 80011f2:	d116      	bne.n	8001222 <I2CM_Read_Sr+0x4e>
		i2c_handler = &hi2c1;
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <I2CM_Read_Sr+0x70>)
 80011f6:	60bb      	str	r3, [r7, #8]
	} else {
		return HAL_ERROR; // Invalid I2C address
	}
	if (HAL_I2C_Mem_Read(i2c_handler, (address << 1), reg, I2C_MEMADD_SIZE_8BIT, data, size, I2C_TIMEOUT) != HAL_OK) {
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b299      	uxth	r1, r3
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f000 fdb1 	bl	8001d7c <HAL_I2C_Mem_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <I2CM_Read_Sr+0x66>
 8001220:	e001      	b.n	8001226 <I2CM_Read_Sr+0x52>
		return HAL_ERROR; // Invalid I2C address
 8001222:	2301      	movs	r3, #1
 8001224:	e00a      	b.n	800123c <I2CM_Read_Sr+0x68>
		if (HAL_I2C_GetError(i2c_handler) != HAL_I2C_ERROR_AF) {
 8001226:	68b8      	ldr	r0, [r7, #8]
 8001228:	f001 f908 	bl	800243c <HAL_I2C_GetError>
 800122c:	4603      	mov	r3, r0
 800122e:	2b04      	cmp	r3, #4
 8001230:	d001      	beq.n	8001236 <I2CM_Read_Sr+0x62>
			return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e002      	b.n	800123c <I2CM_Read_Sr+0x68>
		}
		ret = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
	}
	return ret; 
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000070 	.word	0x20000070

08001248 <I2CM_IsDeviceReady>:

HAL_StatusTypeDef I2CM_IsDeviceReady(uint8_t address, uint32_t trials)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *i2c_handler;

	if (address == DS3231_ADDRESS) {
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b68      	cmp	r3, #104	@ 0x68
 800125c:	d10f      	bne.n	800127e <I2CM_IsDeviceReady+0x36>
		i2c_handler = &hi2c1;
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <I2CM_IsDeviceReady+0x58>)
 8001260:	60bb      	str	r3, [r7, #8]
	} else {
		return HAL_ERROR; // Invalid I2C address
	}
	if (HAL_I2C_IsDeviceReady(i2c_handler, (address << 1), trials, I2C_TIMEOUT) != HAL_OK) {
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	b29b      	uxth	r3, r3
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	b299      	uxth	r1, r3
 800126a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f000 ffb5 	bl	80021e0 <HAL_I2C_IsDeviceReady>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00c      	beq.n	8001296 <I2CM_IsDeviceReady+0x4e>
 800127c:	e001      	b.n	8001282 <I2CM_IsDeviceReady+0x3a>
		return HAL_ERROR; // Invalid I2C address
 800127e:	2301      	movs	r3, #1
 8001280:	e00a      	b.n	8001298 <I2CM_IsDeviceReady+0x50>
		if (HAL_I2C_GetError(i2c_handler) != HAL_I2C_ERROR_AF) {
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f001 f8da 	bl	800243c <HAL_I2C_GetError>
 8001288:	4603      	mov	r3, r0
 800128a:	2b04      	cmp	r3, #4
 800128c:	d001      	beq.n	8001292 <I2CM_IsDeviceReady+0x4a>
			return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e002      	b.n	8001298 <I2CM_IsDeviceReady+0x50>
		}
		ret = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
	}
	return ret; 
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000070 	.word	0x20000070

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f931 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fa82 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f93b 	bl	8001582 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f911 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008
 800136c:	200000c4 	.word	0x200000c4

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200000c4 	.word	0x200000c4

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_Delay+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ae:	bf00      	nop
 80013b0:	f7ff ffde 	bl	8001370 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	e165      	b.n	8001884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8154 	bne.w	800187e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d005      	beq.n	80015ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d130      	bne.n	8001650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b03      	cmp	r3, #3
 800165a:	d017      	beq.n	800168c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d123      	bne.n	80016e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3208      	adds	r2, #8
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0203 	and.w	r2, r3, #3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80ae 	beq.w	800187e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b5d      	ldr	r3, [pc, #372]	@ (800189c <HAL_GPIO_Init+0x300>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a5c      	ldr	r2, [pc, #368]	@ (800189c <HAL_GPIO_Init+0x300>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b5a      	ldr	r3, [pc, #360]	@ (800189c <HAL_GPIO_Init+0x300>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173e:	4a58      	ldr	r2, [pc, #352]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4f      	ldr	r2, [pc, #316]	@ (80018a4 <HAL_GPIO_Init+0x308>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x21a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4e      	ldr	r2, [pc, #312]	@ (80018a8 <HAL_GPIO_Init+0x30c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x216>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4d      	ldr	r2, [pc, #308]	@ (80018ac <HAL_GPIO_Init+0x310>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x212>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_GPIO_Init+0x314>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x20e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4b      	ldr	r2, [pc, #300]	@ (80018b4 <HAL_GPIO_Init+0x318>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x20a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4a      	ldr	r2, [pc, #296]	@ (80018b8 <HAL_GPIO_Init+0x31c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x206>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a49      	ldr	r2, [pc, #292]	@ (80018bc <HAL_GPIO_Init+0x320>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x202>
 800179a:	2306      	movs	r3, #6
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 800179e:	2307      	movs	r3, #7
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x21c>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	@ (80018a0 <HAL_GPIO_Init+0x304>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a31      	ldr	r2, [pc, #196]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b25      	ldr	r3, [pc, #148]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <HAL_GPIO_Init+0x324>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae96 	bls.w	80015b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e12b      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7fe ff86 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	@ 0x24
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800194a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800195a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f001 fa0c 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a81      	ldr	r2, [pc, #516]	@ (8001b6c <HAL_I2C_Init+0x274>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d807      	bhi.n	800197c <HAL_I2C_Init+0x84>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a80      	ldr	r2, [pc, #512]	@ (8001b70 <HAL_I2C_Init+0x278>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e006      	b.n	800198a <HAL_I2C_Init+0x92>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b74 <HAL_I2C_Init+0x27c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	bf94      	ite	ls
 8001984:	2301      	movls	r3, #1
 8001986:	2300      	movhi	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0e7      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4a78      	ldr	r2, [pc, #480]	@ (8001b78 <HAL_I2C_Init+0x280>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0c9b      	lsrs	r3, r3, #18
 800199c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b6c <HAL_I2C_Init+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d802      	bhi.n	80019cc <HAL_I2C_Init+0xd4>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	e009      	b.n	80019e0 <HAL_I2C_Init+0xe8>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a69      	ldr	r2, [pc, #420]	@ (8001b7c <HAL_I2C_Init+0x284>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	495c      	ldr	r1, [pc, #368]	@ (8001b6c <HAL_I2C_Init+0x274>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d819      	bhi.n	8001a34 <HAL_I2C_Init+0x13c>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e59      	subs	r1, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a14:	400b      	ands	r3, r1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_I2C_Init+0x138>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e59      	subs	r1, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	e051      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e04f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d111      	bne.n	8001a60 <HAL_I2C_Init+0x168>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e012      	b.n	8001a86 <HAL_I2C_Init+0x18e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Init+0x196>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e022      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10e      	bne.n	8001ab4 <HAL_I2C_Init+0x1bc>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e58      	subs	r0, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab2:	e00f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	0099      	lsls	r1, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6911      	ldr	r1, [r2, #16]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68d2      	ldr	r2, [r2, #12]
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	000186a0 	.word	0x000186a0
 8001b70:	001e847f 	.word	0x001e847f
 8001b74:	003d08ff 	.word	0x003d08ff
 8001b78:	431bde83 	.word	0x431bde83
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	817b      	strh	r3, [r7, #10]
 8001b90:	4613      	mov	r3, r2
 8001b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fbec 	bl	8001370 <HAL_GetTick>
 8001b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	f040 80e0 	bne.w	8001d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2319      	movs	r3, #25
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4970      	ldr	r1, [pc, #448]	@ (8001d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fdb8 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e0d3      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_I2C_Master_Transmit+0x50>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e0cc      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d007      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2221      	movs	r2, #33	@ 0x21
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2210      	movs	r2, #16
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	893a      	ldrh	r2, [r7, #8]
 8001c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a50      	ldr	r2, [pc, #320]	@ (8001d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c38:	8979      	ldrh	r1, [r7, #10]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fc08 	bl	8002454 <I2C_MasterRequestWrite>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e08d      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c64:	e066      	b.n	8001d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fe76 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d107      	bne.n	8001c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e06b      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d11b      	bne.n	8001d08 <HAL_I2C_Master_Transmit+0x188>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d017      	beq.n	8001d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	6a39      	ldr	r1, [r7, #32]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fe6d 	bl	80029ec <I2C_WaitOnBTFFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d107      	bne.n	8001d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e01a      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d194      	bne.n	8001c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	00100002 	.word	0x00100002
 8001d78:	ffff0000 	.word	0xffff0000

08001d7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08c      	sub	sp, #48	@ 0x30
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d96:	f7ff faeb 	bl	8001370 <HAL_GetTick>
 8001d9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	f040 8214 	bne.w	80021d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2319      	movs	r3, #25
 8001db0:	2201      	movs	r2, #1
 8001db2:	497b      	ldr	r1, [pc, #492]	@ (8001fa0 <HAL_I2C_Mem_Read+0x224>)
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fcb7 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e207      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Mem_Read+0x56>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e200      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d007      	beq.n	8001df8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2222      	movs	r2, #34	@ 0x22
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2240      	movs	r2, #64	@ 0x40
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa4 <HAL_I2C_Mem_Read+0x228>)
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e3a:	88f8      	ldrh	r0, [r7, #6]
 8001e3c:	893a      	ldrh	r2, [r7, #8]
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4603      	mov	r3, r0
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fb84 	bl	8002558 <I2C_RequestMemoryRead>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1bc      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d113      	bne.n	8001e8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e190      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d11b      	bne.n	8001eca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e170      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d11b      	bne.n	8001f0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	e150      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f20:	e144      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	f200 80f1 	bhi.w	800210e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d123      	bne.n	8001f7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fd9f 	bl	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e145      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f7a:	e117      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d14e      	bne.n	8002022 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4906      	ldr	r1, [pc, #24]	@ (8001fa8 <HAL_I2C_Mem_Read+0x22c>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fbca 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e11a      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
 8001f9e:	bf00      	nop
 8001fa0:	00100002 	.word	0x00100002
 8001fa4:	ffff0000 	.word	0xffff0000
 8001fa8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002020:	e0c4      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002028:	2200      	movs	r2, #0
 800202a:	496c      	ldr	r1, [pc, #432]	@ (80021dc <HAL_I2C_Mem_Read+0x460>)
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fb7b 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cb      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800204a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002084:	2200      	movs	r2, #0
 8002086:	4955      	ldr	r1, [pc, #340]	@ (80021dc <HAL_I2C_Mem_Read+0x460>)
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 fb4d 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e09d      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800210c:	e04e      	b.n	80021ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fcb2 	bl	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e058      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b04      	cmp	r3, #4
 8002160:	d124      	bne.n	80021ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	2b03      	cmp	r3, #3
 8002168:	d107      	bne.n	800217a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002178:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f aeb6 	bne.w	8001f22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	@ 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	00010004 	.word	0x00010004

080021e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff f8be 	bl	8001370 <HAL_GetTick>
 80021f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 8111 	bne.w	800242a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	4988      	ldr	r1, [pc, #544]	@ (8002434 <HAL_I2C_IsDeviceReady+0x254>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fa88 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e104      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2C_IsDeviceReady+0x50>
 800222c:	2302      	movs	r3, #2
 800222e:	e0fd      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d007      	beq.n	8002256 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2224      	movs	r2, #36	@ 0x24
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a70      	ldr	r2, [pc, #448]	@ (8002438 <HAL_I2C_IsDeviceReady+0x258>)
 8002278:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002288:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa46 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00d      	beq.n	80022be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b0:	d103      	bne.n	80022ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0b6      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff f84f 	bl	8001370 <HAL_GetTick>
 80022d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002302:	e025      	b.n	8002350 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7ff f834 	bl	8001370 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <HAL_I2C_IsDeviceReady+0x13a>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	22a0      	movs	r2, #160	@ 0xa0
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2ba0      	cmp	r3, #160	@ 0xa0
 800235a:	d005      	beq.n	8002368 <HAL_I2C_IsDeviceReady+0x188>
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <HAL_I2C_IsDeviceReady+0x188>
 8002362:	7dbb      	ldrb	r3, [r7, #22]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0cd      	beq.n	8002304 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d129      	bne.n	80023d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2319      	movs	r3, #25
 80023aa:	2201      	movs	r2, #1
 80023ac:	4921      	ldr	r1, [pc, #132]	@ (8002434 <HAL_I2C_IsDeviceReady+0x254>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f9ba 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e036      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e02c      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	490f      	ldr	r1, [pc, #60]	@ (8002434 <HAL_I2C_IsDeviceReady+0x254>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f996 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e012      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	3301      	adds	r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	f4ff af32 	bcc.w	800227a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	00100002 	.word	0x00100002
 8002438:	ffff0000 	.word	0xffff0000

0800243c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	460b      	mov	r3, r1
 8002462:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d006      	beq.n	800247e <I2C_MasterRequestWrite+0x2a>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d003      	beq.n	800247e <I2C_MasterRequestWrite+0x2a>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800247c:	d108      	bne.n	8002490 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e00b      	b.n	80024a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	2b12      	cmp	r3, #18
 8002496:	d107      	bne.n	80024a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f937 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ce:	d103      	bne.n	80024d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e035      	b.n	8002548 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024e4:	d108      	bne.n	80024f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	e01b      	b.n	8002530 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024f8:	897b      	ldrh	r3, [r7, #10]
 80024fa:	11db      	asrs	r3, r3, #7
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f003 0306 	and.w	r3, r3, #6
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f063 030f 	orn	r3, r3, #15
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	490e      	ldr	r1, [pc, #56]	@ (8002550 <I2C_MasterRequestWrite+0xfc>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f980 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e010      	b.n	8002548 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002526:	897b      	ldrh	r3, [r7, #10]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4907      	ldr	r1, [pc, #28]	@ (8002554 <I2C_MasterRequestWrite+0x100>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f970 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	00010008 	.word	0x00010008
 8002554:	00010002 	.word	0x00010002

08002558 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	461a      	mov	r2, r3
 8002566:	4603      	mov	r3, r0
 8002568:	817b      	strh	r3, [r7, #10]
 800256a:	460b      	mov	r3, r1
 800256c:	813b      	strh	r3, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002580:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	2200      	movs	r2, #0
 800259a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f8c2 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025b8:	d103      	bne.n	80025c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0aa      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	4952      	ldr	r1, [pc, #328]	@ (8002724 <I2C_RequestMemoryRead+0x1cc>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f91d 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e097      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f9a8 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b04      	cmp	r3, #4
 8002618:	d107      	bne.n	800262a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e076      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	e021      	b.n	8002684 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002640:	893b      	ldrh	r3, [r7, #8]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	b29b      	uxth	r3, r3
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002650:	6a39      	ldr	r1, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f982 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2b04      	cmp	r3, #4
 8002664:	d107      	bne.n	8002676 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e050      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800267a:	893b      	ldrh	r3, [r7, #8]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002686:	6a39      	ldr	r1, [r7, #32]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f967 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	2b04      	cmp	r3, #4
 800269a:	d107      	bne.n	80026ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e035      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f82b 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	d103      	bne.n	80026f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e013      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	6a3a      	ldr	r2, [r7, #32]
 8002708:	4906      	ldr	r1, [pc, #24]	@ (8002724 <I2C_RequestMemoryRead+0x1cc>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f886 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	00010002 	.word	0x00010002

08002728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	e048      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d044      	beq.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe fe15 	bl	8001370 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d139      	bne.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10d      	bne.n	800277e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	43da      	mvns	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	e00c      	b.n	8002798 <I2C_WaitOnFlagUntilTimeout+0x70>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	43da      	mvns	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	429a      	cmp	r2, r3
 800279c:	d116      	bne.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e023      	b.n	8002814 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d10d      	bne.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	43da      	mvns	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	e00c      	b.n	800280c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	429a      	cmp	r2, r3
 8002810:	d093      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800282a:	e071      	b.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283a:	d123      	bne.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e067      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d041      	beq.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288c:	f7fe fd70 	bl	8001370 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d136      	bne.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10c      	bne.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e00b      	b.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e021      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10c      	bne.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	43da      	mvns	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e00b      	b.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af6d 	bne.w	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002968:	e034      	b.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8e3 	bl	8002b36 <I2C_IsAcknowledgeFailed>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e034      	b.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d028      	beq.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7fe fcf5 	bl	8001370 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11d      	bne.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a2:	2b80      	cmp	r3, #128	@ 0x80
 80029a4:	d016      	beq.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e007      	b.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b80      	cmp	r3, #128	@ 0x80
 80029e0:	d1c3      	bne.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f8:	e034      	b.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f89b 	bl	8002b36 <I2C_IsAcknowledgeFailed>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e034      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d028      	beq.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fcad 	bl	8001370 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11d      	bne.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d016      	beq.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e007      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d1c3      	bne.n	80029fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a88:	e049      	b.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d119      	bne.n	8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0210 	mvn.w	r2, #16
 8002aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e030      	b.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002acc:	f7fe fc50 	bl	8001370 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d302      	bcc.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aec:	2b40      	cmp	r3, #64	@ 0x40
 8002aee:	d016      	beq.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b28:	2b40      	cmp	r3, #64	@ 0x40
 8002b2a:	d1ae      	bne.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4c:	d11b      	bne.n	8002b86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0cc      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b68      	ldr	r3, [pc, #416]	@ (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d90c      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b65      	ldr	r3, [pc, #404]	@ (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b63      	ldr	r3, [pc, #396]	@ (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0b8      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be8:	4b59      	ldr	r3, [pc, #356]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c00:	4b53      	ldr	r3, [pc, #332]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a52      	ldr	r2, [pc, #328]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b50      	ldr	r3, [pc, #320]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	494d      	ldr	r1, [pc, #308]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d044      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b47      	ldr	r3, [pc, #284]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d119      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e07f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c52:	4b3f      	ldr	r3, [pc, #252]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e067      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4934      	ldr	r1, [pc, #208]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe fb74 	bl	8001370 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe fb70 	bl	8001370 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e04f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d20c      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e032      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4916      	ldr	r1, [pc, #88]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	490e      	ldr	r1, [pc, #56]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d1a:	f000 f855 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	490a      	ldr	r1, [pc, #40]	@ (8002d54 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	5ccb      	ldrb	r3, [r1, r3]
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d36:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fad4 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023c00 	.word	0x40023c00
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08003d5c 	.word	0x08003d5c
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a9b      	lsrs	r3, r3, #10
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08003d6c 	.word	0x08003d6c

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da4:	f7ff ffdc 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0b5b      	lsrs	r3, r3, #13
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08003d6c 	.word	0x08003d6c

08002dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dcc:	b0ae      	sub	sp, #184	@ 0xb8
 8002dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dee:	4bcb      	ldr	r3, [pc, #812]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	f200 8206 	bhi.w	8003208 <HAL_RCC_GetSysClockFreq+0x440>
 8002dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08003209 	.word	0x08003209
 8002e0c:	08003209 	.word	0x08003209
 8002e10:	08003209 	.word	0x08003209
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08003209 	.word	0x08003209
 8002e1c:	08003209 	.word	0x08003209
 8002e20:	08003209 	.word	0x08003209
 8002e24:	08002e49 	.word	0x08002e49
 8002e28:	08003209 	.word	0x08003209
 8002e2c:	08003209 	.word	0x08003209
 8002e30:	08003209 	.word	0x08003209
 8002e34:	08003039 	.word	0x08003039
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4bb9      	ldr	r3, [pc, #740]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e3e:	e1e7      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e40:	4bb8      	ldr	r3, [pc, #736]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e46:	e1e3      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4bb4      	ldr	r3, [pc, #720]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e54:	4bb1      	ldr	r3, [pc, #708]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d071      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e60:	4bae      	ldr	r3, [pc, #696]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e86:	4622      	mov	r2, r4
 8002e88:	462b      	mov	r3, r5
 8002e8a:	f04f 0000 	mov.w	r0, #0
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	0159      	lsls	r1, r3, #5
 8002e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e98:	0150      	lsls	r0, r2, #5
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	1a51      	subs	r1, r2, r1
 8002ea2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002eb8:	4649      	mov	r1, r9
 8002eba:	018b      	lsls	r3, r1, #6
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	018a      	lsls	r2, r1, #6
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	1a51      	subs	r1, r2, r1
 8002eca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ecc:	4649      	mov	r1, r9
 8002ece:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	00cb      	lsls	r3, r1, #3
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eea:	4641      	mov	r1, r8
 8002eec:	00ca      	lsls	r2, r1, #3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002efa:	462b      	mov	r3, r5
 8002efc:	460a      	mov	r2, r1
 8002efe:	eb42 0303 	adc.w	r3, r2, r3
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f10:	4629      	mov	r1, r5
 8002f12:	024b      	lsls	r3, r1, #9
 8002f14:	4621      	mov	r1, r4
 8002f16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	024a      	lsls	r2, r1, #9
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f34:	f7fd f966 	bl	8000204 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f42:	e067      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f44:	4b75      	ldr	r3, [pc, #468]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f5e:	2300      	movs	r3, #0
 8002f60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002f66:	4622      	mov	r2, r4
 8002f68:	462b      	mov	r3, r5
 8002f6a:	f04f 0000 	mov.w	r0, #0
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f78:	0150      	lsls	r0, r2, #5
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4621      	mov	r1, r4
 8002f80:	1a51      	subs	r1, r2, r1
 8002f82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f84:	4629      	mov	r1, r5
 8002f86:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f98:	4649      	mov	r1, r9
 8002f9a:	018b      	lsls	r3, r1, #6
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	018a      	lsls	r2, r1, #6
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fac:	4649      	mov	r1, r9
 8002fae:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc6:	4692      	mov	sl, r2
 8002fc8:	469b      	mov	fp, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	eb1a 0303 	adds.w	r3, sl, r3
 8002fd0:	623b      	str	r3, [r7, #32]
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	028b      	lsls	r3, r1, #10
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	028a      	lsls	r2, r1, #10
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003000:	677a      	str	r2, [r7, #116]	@ 0x74
 8003002:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003006:	f7fd f8fd 	bl	8000204 <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4613      	mov	r3, r2
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003014:	4b41      	ldr	r3, [pc, #260]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003026:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800302a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003036:	e0eb      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003038:	4b38      	ldr	r3, [pc, #224]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003044:	4b35      	ldr	r3, [pc, #212]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d06b      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003050:	4b32      	ldr	r3, [pc, #200]	@ (800311c <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	2200      	movs	r2, #0
 8003058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800305a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800305c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800305e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003062:	663b      	str	r3, [r7, #96]	@ 0x60
 8003064:	2300      	movs	r3, #0
 8003066:	667b      	str	r3, [r7, #100]	@ 0x64
 8003068:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800306c:	4622      	mov	r2, r4
 800306e:	462b      	mov	r3, r5
 8003070:	f04f 0000 	mov.w	r0, #0
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	0159      	lsls	r1, r3, #5
 800307a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307e:	0150      	lsls	r0, r2, #5
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4621      	mov	r1, r4
 8003086:	1a51      	subs	r1, r2, r1
 8003088:	61b9      	str	r1, [r7, #24]
 800308a:	4629      	mov	r1, r5
 800308c:	eb63 0301 	sbc.w	r3, r3, r1
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800309e:	4659      	mov	r1, fp
 80030a0:	018b      	lsls	r3, r1, #6
 80030a2:	4651      	mov	r1, sl
 80030a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a8:	4651      	mov	r1, sl
 80030aa:	018a      	lsls	r2, r1, #6
 80030ac:	4651      	mov	r1, sl
 80030ae:	ebb2 0801 	subs.w	r8, r2, r1
 80030b2:	4659      	mov	r1, fp
 80030b4:	eb63 0901 	sbc.w	r9, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030cc:	4690      	mov	r8, r2
 80030ce:	4699      	mov	r9, r3
 80030d0:	4623      	mov	r3, r4
 80030d2:	eb18 0303 	adds.w	r3, r8, r3
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	462b      	mov	r3, r5
 80030da:	eb49 0303 	adc.w	r3, r9, r3
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030ec:	4629      	mov	r1, r5
 80030ee:	024b      	lsls	r3, r1, #9
 80030f0:	4621      	mov	r1, r4
 80030f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f6:	4621      	mov	r1, r4
 80030f8:	024a      	lsls	r2, r1, #9
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003102:	2200      	movs	r2, #0
 8003104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003106:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003108:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800310c:	f7fd f87a 	bl	8000204 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4613      	mov	r3, r2
 8003116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800311a:	e065      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x420>
 800311c:	40023800 	.word	0x40023800
 8003120:	00f42400 	.word	0x00f42400
 8003124:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003128:	4b3d      	ldr	r3, [pc, #244]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x458>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	2200      	movs	r2, #0
 8003130:	4618      	mov	r0, r3
 8003132:	4611      	mov	r1, r2
 8003134:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003138:	653b      	str	r3, [r7, #80]	@ 0x50
 800313a:	2300      	movs	r3, #0
 800313c:	657b      	str	r3, [r7, #84]	@ 0x54
 800313e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003142:	4642      	mov	r2, r8
 8003144:	464b      	mov	r3, r9
 8003146:	f04f 0000 	mov.w	r0, #0
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	0159      	lsls	r1, r3, #5
 8003150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003154:	0150      	lsls	r0, r2, #5
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4641      	mov	r1, r8
 800315c:	1a51      	subs	r1, r2, r1
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	4649      	mov	r1, r9
 8003162:	eb63 0301 	sbc.w	r3, r3, r1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003174:	4659      	mov	r1, fp
 8003176:	018b      	lsls	r3, r1, #6
 8003178:	4651      	mov	r1, sl
 800317a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800317e:	4651      	mov	r1, sl
 8003180:	018a      	lsls	r2, r1, #6
 8003182:	4651      	mov	r1, sl
 8003184:	1a54      	subs	r4, r2, r1
 8003186:	4659      	mov	r1, fp
 8003188:	eb63 0501 	sbc.w	r5, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	00eb      	lsls	r3, r5, #3
 8003196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319a:	00e2      	lsls	r2, r4, #3
 800319c:	4614      	mov	r4, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	18e3      	adds	r3, r4, r3
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	464b      	mov	r3, r9
 80031a8:	eb45 0303 	adc.w	r3, r5, r3
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ba:	4629      	mov	r1, r5
 80031bc:	028b      	lsls	r3, r1, #10
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c4:	4621      	mov	r1, r4
 80031c6:	028a      	lsls	r2, r1, #10
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031d0:	2200      	movs	r2, #0
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031da:	f7fd f813 	bl	8000204 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4613      	mov	r3, r2
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0f1b      	lsrs	r3, r3, #28
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80031f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003206:	e003      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x45c>)
 800320a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800320e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003210:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003214:	4618      	mov	r0, r3
 8003216:	37b8      	adds	r7, #184	@ 0xb8
 8003218:	46bd      	mov	sp, r7
 800321a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	00f42400 	.word	0x00f42400

08003228 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e28d      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8083 	beq.w	800334e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003248:	4b94      	ldr	r3, [pc, #592]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b04      	cmp	r3, #4
 8003252:	d019      	beq.n	8003288 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003254:	4b91      	ldr	r3, [pc, #580]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
        || \
 800325c:	2b08      	cmp	r3, #8
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003260:	4b8e      	ldr	r3, [pc, #568]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800326c:	d00c      	beq.n	8003288 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326e:	4b8b      	ldr	r3, [pc, #556]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d112      	bne.n	80032a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327a:	4b88      	ldr	r3, [pc, #544]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003286:	d10b      	bne.n	80032a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	4b84      	ldr	r3, [pc, #528]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05b      	beq.n	800334c <HAL_RCC_OscConfig+0x124>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d157      	bne.n	800334c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e25a      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a8:	d106      	bne.n	80032b8 <HAL_RCC_OscConfig+0x90>
 80032aa:	4b7c      	ldr	r3, [pc, #496]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7b      	ldr	r2, [pc, #492]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xcc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0xb4>
 80032c2:	4b76      	ldr	r3, [pc, #472]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a75      	ldr	r2, [pc, #468]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b73      	ldr	r3, [pc, #460]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a72      	ldr	r2, [pc, #456]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xcc>
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6e      	ldr	r2, [pc, #440]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b6c      	ldr	r3, [pc, #432]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6b      	ldr	r2, [pc, #428]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe f838 	bl	8001370 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fe f834 	bl	8001370 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e21f      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b61      	ldr	r3, [pc, #388]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xdc>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f824 	bl	8001370 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe f820 	bl	8001370 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	@ 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e20b      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b57      	ldr	r3, [pc, #348]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x104>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06f      	beq.n	800343a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800335a:	4b50      	ldr	r3, [pc, #320]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d017      	beq.n	8003396 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003366:	4b4d      	ldr	r3, [pc, #308]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
        || \
 800336e:	2b08      	cmp	r3, #8
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003372:	4b4a      	ldr	r3, [pc, #296]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b47      	ldr	r3, [pc, #284]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b44      	ldr	r3, [pc, #272]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b41      	ldr	r3, [pc, #260]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x186>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1d3      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4937      	ldr	r1, [pc, #220]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b34      	ldr	r3, [pc, #208]	@ (80034a0 <HAL_RCC_OscConfig+0x278>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fd ffcd 	bl	8001370 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7fd ffc9 	bl	8001370 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1b4      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b2b      	ldr	r3, [pc, #172]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b28      	ldr	r3, [pc, #160]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4925      	ldr	r1, [pc, #148]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_OscConfig+0x278>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd ffac 	bl	8001370 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7fd ffa8 	bl	8001370 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e193      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d036      	beq.n	80034b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x27c>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fd ff8c 	bl	8001370 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7fd ff88 	bl	8001370 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e173      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x234>
 800347a:	e01b      	b.n	80034b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_RCC_OscConfig+0x27c>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd ff75 	bl	8001370 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e00e      	b.n	80034a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd ff71 	bl	8001370 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d907      	bls.n	80034a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e15c      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
 800349c:	40023800 	.word	0x40023800
 80034a0:	42470000 	.word	0x42470000
 80034a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b8a      	ldr	r3, [pc, #552]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ea      	bne.n	800348a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8097 	beq.w	80035f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b83      	ldr	r3, [pc, #524]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b7f      	ldr	r3, [pc, #508]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e2:	4b7c      	ldr	r3, [pc, #496]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b79      	ldr	r3, [pc, #484]	@ (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	@ (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fd ff31 	bl	8001370 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fd ff2d 	bl	8001370 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e118      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b6c      	ldr	r3, [pc, #432]	@ (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x31e>
 8003538:	4b66      	ldr	r3, [pc, #408]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	4a65      	ldr	r2, [pc, #404]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	@ 0x70
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x358>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x340>
 800354e:	4b61      	ldr	r3, [pc, #388]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	4a60      	ldr	r2, [pc, #384]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6713      	str	r3, [r2, #112]	@ 0x70
 800355a:	4b5e      	ldr	r3, [pc, #376]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355e:	4a5d      	ldr	r2, [pc, #372]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	@ 0x70
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0x358>
 8003568:	4b5a      	ldr	r3, [pc, #360]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a59      	ldr	r2, [pc, #356]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	4b57      	ldr	r3, [pc, #348]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	4a56      	ldr	r2, [pc, #344]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd fef2 	bl	8001370 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fd feee 	bl	8001370 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0d7      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	4b4b      	ldr	r3, [pc, #300]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ee      	beq.n	8003590 <HAL_RCC_OscConfig+0x368>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd fedc 	bl	8001370 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fd fed8 	bl	8001370 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0c1      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	4b40      	ldr	r3, [pc, #256]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ee      	bne.n	80035bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	4a3a      	ldr	r2, [pc, #232]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80ad 	beq.w	8003754 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035fa:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d060      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d145      	bne.n	800369a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b33      	ldr	r3, [pc, #204]	@ (80036dc <HAL_RCC_OscConfig+0x4b4>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fd feac 	bl	8001370 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fea8 	bl	8001370 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e093      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	071b      	lsls	r3, r3, #28
 8003666:	491b      	ldr	r1, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x4b4>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fe7d 	bl	8001370 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd fe79 	bl	8001370 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e064      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x452>
 8003698:	e05c      	b.n	8003754 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_OscConfig+0x4b4>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fe66 	bl	8001370 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fd fe62 	bl	8001370 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e04d      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x480>
 80036c6:	e045      	b.n	8003754 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e040      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003760 <HAL_RCC_OscConfig+0x538>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d030      	beq.n	8003750 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d129      	bne.n	8003750 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d122      	bne.n	8003750 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003718:	4293      	cmp	r3, r2
 800371a:	d119      	bne.n	8003750 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	3b01      	subs	r3, #1
 800372a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d10f      	bne.n	8003750 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d107      	bne.n	8003750 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800

08003764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e042      	b.n	80037fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd f904 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	@ 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f82b 	bl	8003804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b0c0      	sub	sp, #256	@ 0x100
 800380a:	af00      	add	r7, sp, #0
 800380c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	68d9      	ldr	r1, [r3, #12]
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	ea40 0301 	orr.w	r3, r0, r1
 800382c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	431a      	orrs	r2, r3
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800385c:	f021 010c 	bic.w	r1, r1, #12
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800386a:	430b      	orrs	r3, r1
 800386c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387e:	6999      	ldr	r1, [r3, #24]
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	ea40 0301 	orr.w	r3, r0, r1
 800388a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad0 <UART_SetConfig+0x2cc>)
 8003894:	429a      	cmp	r2, r3
 8003896:	d005      	beq.n	80038a4 <UART_SetConfig+0xa0>
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad4 <UART_SetConfig+0x2d0>)
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d104      	bne.n	80038ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7ff fa7c 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 80038a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038ac:	e003      	b.n	80038b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ae:	f7ff fa63 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 80038b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038c0:	f040 810c 	bne.w	8003adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	1891      	adds	r1, r2, r2
 80038dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038de:	415b      	adcs	r3, r3
 80038e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038e6:	4621      	mov	r1, r4
 80038e8:	eb12 0801 	adds.w	r8, r2, r1
 80038ec:	4629      	mov	r1, r5
 80038ee:	eb43 0901 	adc.w	r9, r3, r1
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003906:	4690      	mov	r8, r2
 8003908:	4699      	mov	r9, r3
 800390a:	4623      	mov	r3, r4
 800390c:	eb18 0303 	adds.w	r3, r8, r3
 8003910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003914:	462b      	mov	r3, r5
 8003916:	eb49 0303 	adc.w	r3, r9, r3
 800391a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800392a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800392e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003932:	460b      	mov	r3, r1
 8003934:	18db      	adds	r3, r3, r3
 8003936:	653b      	str	r3, [r7, #80]	@ 0x50
 8003938:	4613      	mov	r3, r2
 800393a:	eb42 0303 	adc.w	r3, r2, r3
 800393e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003948:	f7fc fc5c 	bl	8000204 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4b61      	ldr	r3, [pc, #388]	@ (8003ad8 <UART_SetConfig+0x2d4>)
 8003952:	fba3 2302 	umull	r2, r3, r3, r2
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	011c      	lsls	r4, r3, #4
 800395a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800395e:	2200      	movs	r2, #0
 8003960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003964:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800396c:	4642      	mov	r2, r8
 800396e:	464b      	mov	r3, r9
 8003970:	1891      	adds	r1, r2, r2
 8003972:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003974:	415b      	adcs	r3, r3
 8003976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800397c:	4641      	mov	r1, r8
 800397e:	eb12 0a01 	adds.w	sl, r2, r1
 8003982:	4649      	mov	r1, r9
 8003984:	eb43 0b01 	adc.w	fp, r3, r1
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800399c:	4692      	mov	sl, r2
 800399e:	469b      	mov	fp, r3
 80039a0:	4643      	mov	r3, r8
 80039a2:	eb1a 0303 	adds.w	r3, sl, r3
 80039a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039aa:	464b      	mov	r3, r9
 80039ac:	eb4b 0303 	adc.w	r3, fp, r3
 80039b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039c8:	460b      	mov	r3, r1
 80039ca:	18db      	adds	r3, r3, r3
 80039cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ce:	4613      	mov	r3, r2
 80039d0:	eb42 0303 	adc.w	r3, r2, r3
 80039d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039de:	f7fc fc11 	bl	8000204 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <UART_SetConfig+0x2d4>)
 80039ea:	fba3 2301 	umull	r2, r3, r3, r1
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2264      	movs	r2, #100	@ 0x64
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	1acb      	subs	r3, r1, r3
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039fe:	4b36      	ldr	r3, [pc, #216]	@ (8003ad8 <UART_SetConfig+0x2d4>)
 8003a00:	fba3 2302 	umull	r2, r3, r3, r2
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a0c:	441c      	add	r4, r3
 8003a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	1891      	adds	r1, r2, r2
 8003a26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a28:	415b      	adcs	r3, r3
 8003a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a30:	4641      	mov	r1, r8
 8003a32:	1851      	adds	r1, r2, r1
 8003a34:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a36:	4649      	mov	r1, r9
 8003a38:	414b      	adcs	r3, r1
 8003a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a48:	4659      	mov	r1, fp
 8003a4a:	00cb      	lsls	r3, r1, #3
 8003a4c:	4651      	mov	r1, sl
 8003a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a52:	4651      	mov	r1, sl
 8003a54:	00ca      	lsls	r2, r1, #3
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a64:	464b      	mov	r3, r9
 8003a66:	460a      	mov	r2, r1
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a84:	460b      	mov	r3, r1
 8003a86:	18db      	adds	r3, r3, r3
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a9a:	f7fc fbb3 	bl	8000204 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <UART_SetConfig+0x2d4>)
 8003aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	2164      	movs	r1, #100	@ 0x64
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	3332      	adds	r3, #50	@ 0x32
 8003ab6:	4a08      	ldr	r2, [pc, #32]	@ (8003ad8 <UART_SetConfig+0x2d4>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 0207 	and.w	r2, r3, #7
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4422      	add	r2, r4
 8003aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003acc:	e106      	b.n	8003cdc <UART_SetConfig+0x4d8>
 8003ace:	bf00      	nop
 8003ad0:	40011000 	.word	0x40011000
 8003ad4:	40011400 	.word	0x40011400
 8003ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aee:	4642      	mov	r2, r8
 8003af0:	464b      	mov	r3, r9
 8003af2:	1891      	adds	r1, r2, r2
 8003af4:	6239      	str	r1, [r7, #32]
 8003af6:	415b      	adcs	r3, r3
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003afe:	4641      	mov	r1, r8
 8003b00:	1854      	adds	r4, r2, r1
 8003b02:	4649      	mov	r1, r9
 8003b04:	eb43 0501 	adc.w	r5, r3, r1
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	00eb      	lsls	r3, r5, #3
 8003b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b16:	00e2      	lsls	r2, r4, #3
 8003b18:	4614      	mov	r4, r2
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	18e3      	adds	r3, r4, r3
 8003b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b24:	464b      	mov	r3, r9
 8003b26:	eb45 0303 	adc.w	r3, r5, r3
 8003b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	008b      	lsls	r3, r1, #2
 8003b4e:	4621      	mov	r1, r4
 8003b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b54:	4621      	mov	r1, r4
 8003b56:	008a      	lsls	r2, r1, #2
 8003b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b5c:	f7fc fb52 	bl	8000204 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4b60      	ldr	r3, [pc, #384]	@ (8003ce8 <UART_SetConfig+0x4e4>)
 8003b66:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	011c      	lsls	r4, r3, #4
 8003b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	1891      	adds	r1, r2, r2
 8003b86:	61b9      	str	r1, [r7, #24]
 8003b88:	415b      	adcs	r3, r3
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b90:	4641      	mov	r1, r8
 8003b92:	1851      	adds	r1, r2, r1
 8003b94:	6139      	str	r1, [r7, #16]
 8003b96:	4649      	mov	r1, r9
 8003b98:	414b      	adcs	r3, r1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ba8:	4659      	mov	r1, fp
 8003baa:	00cb      	lsls	r3, r1, #3
 8003bac:	4651      	mov	r1, sl
 8003bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb2:	4651      	mov	r1, sl
 8003bb4:	00ca      	lsls	r2, r1, #3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003be8:	4649      	mov	r1, r9
 8003bea:	008b      	lsls	r3, r1, #2
 8003bec:	4641      	mov	r1, r8
 8003bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	008a      	lsls	r2, r1, #2
 8003bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bfa:	f7fc fb03 	bl	8000204 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	4b38      	ldr	r3, [pc, #224]	@ (8003ce8 <UART_SetConfig+0x4e4>)
 8003c06:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2264      	movs	r2, #100	@ 0x64
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	1acb      	subs	r3, r1, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	@ 0x32
 8003c18:	4a33      	ldr	r2, [pc, #204]	@ (8003ce8 <UART_SetConfig+0x4e4>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c24:	441c      	add	r4, r3
 8003c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c34:	4642      	mov	r2, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c44:	4641      	mov	r1, r8
 8003c46:	1851      	adds	r1, r2, r1
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	414b      	adcs	r3, r1
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	00cb      	lsls	r3, r1, #3
 8003c60:	4651      	mov	r1, sl
 8003c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c66:	4651      	mov	r1, sl
 8003c68:	00ca      	lsls	r2, r1, #3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4642      	mov	r2, r8
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c76:	464b      	mov	r3, r9
 8003c78:	460a      	mov	r2, r1
 8003c7a:	eb42 0303 	adc.w	r3, r2, r3
 8003c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c98:	4649      	mov	r1, r9
 8003c9a:	008b      	lsls	r3, r1, #2
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	008a      	lsls	r2, r1, #2
 8003ca6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003caa:	f7fc faab 	bl	8000204 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <UART_SetConfig+0x4e4>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2164      	movs	r1, #100	@ 0x64
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	3332      	adds	r3, #50	@ 0x32
 8003cc6:	4a08      	ldr	r2, [pc, #32]	@ (8003ce8 <UART_SetConfig+0x4e4>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 020f 	and.w	r2, r3, #15
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4422      	add	r2, r4
 8003cda:	609a      	str	r2, [r3, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce8:	51eb851f 	.word	0x51eb851f

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <__libc_init_array>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8003d34 <__libc_init_array+0x38>)
 8003d00:	4c0d      	ldr	r4, [pc, #52]	@ (8003d38 <__libc_init_array+0x3c>)
 8003d02:	1b64      	subs	r4, r4, r5
 8003d04:	10a4      	asrs	r4, r4, #2
 8003d06:	2600      	movs	r6, #0
 8003d08:	42a6      	cmp	r6, r4
 8003d0a:	d109      	bne.n	8003d20 <__libc_init_array+0x24>
 8003d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d3c <__libc_init_array+0x40>)
 8003d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d40 <__libc_init_array+0x44>)
 8003d10:	f000 f818 	bl	8003d44 <_init>
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	2600      	movs	r6, #0
 8003d1a:	42a6      	cmp	r6, r4
 8003d1c:	d105      	bne.n	8003d2a <__libc_init_array+0x2e>
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d24:	4798      	blx	r3
 8003d26:	3601      	adds	r6, #1
 8003d28:	e7ee      	b.n	8003d08 <__libc_init_array+0xc>
 8003d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2e:	4798      	blx	r3
 8003d30:	3601      	adds	r6, #1
 8003d32:	e7f2      	b.n	8003d1a <__libc_init_array+0x1e>
 8003d34:	08003d7c 	.word	0x08003d7c
 8003d38:	08003d7c 	.word	0x08003d7c
 8003d3c:	08003d7c 	.word	0x08003d7c
 8003d40:	08003d80 	.word	0x08003d80

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
